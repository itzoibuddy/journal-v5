generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  email              String    @unique
  name               String?
  image              String?
  password           String?
  emailVerified      DateTime?
  mobile             String?   @unique
  mobileVerified     DateTime?
  role               String    @default("TRADER")
  status             String    @default("ACTIVE")
  bio                String?
  timezone           String?   @default("UTC")
  defaultRiskRatio   Float?    @default(2.0)
  tradingExperience  String?
  subscriptionStatus String    @default("FREE")
  subscriptionPlan   String?   @default("free")
  subscriptionEnd    DateTime?
  tradeLimit         Int?      @default(50)
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  lastLoginAt        DateTime?
  trades             Trade[]
  accounts           Account[]
  sessions           Session[]
  tradingAccounts    TradingAccount[]

  @@map("users")
}

model Trade {
  id               Int       @id @default(autoincrement())
  symbol           String
  type             String
  instrumentType   String    @default("STOCK")
  entryPrice       Float
  exitPrice        Float?
  quantity         Float
  strikePrice      Float?
  expiryDate       DateTime?
  optionType       String?
  premium          Float?
  entryDate        DateTime
  exitDate         DateTime?
  profitLoss       Float?
  notes            String?
  sector           String?
  strategy         String?
  setupImageUrl    String?
  setupDescription String?
  preTradeEmotion  String?
  postTradeEmotion String?
  tradeConfidence  Int?
  confidenceLevel  Int?
  tradeRating      Int?
  rating           Int?
  lessons          String?
  lessonsLearned   String?
  riskRewardRatio  Float?
  stopLoss         Float?
  targetPrice      Float?
  timeFrame        String?
  marketCondition  String?
  userId           String
  isDemo           Boolean   @default(false)
  isSynced         Boolean   @default(false)
  lastSyncAt       DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  platform         String?
  platformTradeId  String?

  @@index([userId])
  @@index([userId, entryDate])
  @@index([userId, isDemo])
  @@index([symbol, entryDate])
  @@index([entryDate])
  @@index([exitDate])
  @@index([instrumentType])
  @@index([type])
  @@index([profitLoss])
  @@index([createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model AuditLog {
  id         String   @id @default(cuid())
  userId     String?
  action     String
  resource   String
  resourceId String?
  metadata   String?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())

  @@index([userId])
  @@index([action])
  @@index([createdAt])
  @@map("audit_logs")
}

model OTPVerification {
  id        String   @id @default(cuid())
  mobile    String
  otp       String
  purpose   String
  verified  Boolean  @default(false)
  attempts  Int      @default(0)
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@index([mobile])
  @@index([mobile, purpose])
  @@index([expiresAt])
  @@map("otp_verifications")
}

model TradingAccount {
  id          String   @id @default(cuid())
  userId      String
  platform    String
  accountId   String
  accountName String?
  isActive    Boolean  @default(true)
  lastSyncAt  DateTime?
  syncStatus  String   @default("PENDING")
  apiKey      String?
  apiSecret   String?
  accessToken String?
  refreshToken String?
  tokenExpiry DateTime?
  config      String?
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  @@index([platform])
}
